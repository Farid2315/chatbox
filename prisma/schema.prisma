generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/* ---------- SaaS Core ---------- */
model Organization {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  users          User[]         @relation(fields: [], references: [])
  customers      Customer[]
  conversations  Conversation[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  name           String
  passwordHash   String?
  role           UserRole
  organizationId String         @db.ObjectId
  organization   Organization   @relation(fields: [organizationId], references: [id])
  conversations  Conversation[] @relation("UserConversations")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Link to AuthUser (BetterAuth)
  authUserId String?   @db.ObjectId
  authUser   AuthUser? @relation(fields: [authUserId], references: [id])
}

model Customer {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?
  organizationId String         @db.ObjectId
  organization   Organization   @relation(fields: [organizationId], references: [id])
  conversations  Conversation[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Conversation {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String     @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  customerId     String     @db.ObjectId
  customer       Customer   @relation(fields: [customerId], references: [id])
  assignedToId   String?    @db.ObjectId
  assignedTo     User?      @relation("UserConversations", fields: [assignedToId], references: [id])
  status         ConversationStatus @default(OPEN)
  messages       Message[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Message {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String     @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderType     SenderType
  senderId       String?    @db.ObjectId
  content        String
  createdAt      DateTime   @default(now())
}

/* ---------- BetterAuth Models ---------- */
model AuthUser {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  email     String?            @unique
  name      String?
  image     String?
  accounts  AuthAccount[]
  sessions  AuthSession[]
  users     User[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model AuthAccount {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  user              AuthUser   @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
}

model AuthSession {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String     @unique
  userId       String     @db.ObjectId
  user         AuthUser   @relation(fields: [userId], references: [id])
  expires      DateTime
}

model AuthVerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

/* ---------- Enums ---------- */
enum UserRole {
  ADMIN
  AGENT
}

enum ConversationStatus {
  OPEN
  CLOSED
}

enum SenderType {
  USER
  CUSTOMER
  SYSTEM
}
